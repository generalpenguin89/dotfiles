#!/usr/bin/env bash

# Taken from https://github.com/staticsafe/dotfiles on 2012-08-16.
# Updated significantly.

# Basic requirements - bash, sudo (Also make sure your user has sudo privileges!)

# a die function as always
die() {
	printf '%s\n' "$@" >&2
	exit 1
}

# Some variable(s)

userdistro="NULL"
repo="git://github.com/patrickmacarthur/dotfiles.git"

dotfilesdir="src/dotfiles"
files=(Xresources bash_logout bash_profile bashrc cvsignore inputrc tmux.conf vim vimrc zlogin zprofile zsh zshrc)

can_sudo=0

# Lets get this party on the road, shall we?

sudocheck() {
	hash sudo &>/dev/null || die 'sudo does not exist, exiting'
	printf '%s\n' "sudo check : PASSED"
	can_sudo=1
}

distrocheck() {
	hash apt-get &>/dev/null && userdistro="Debian" # For Debian based distros.
	hash yum &>/dev/null && userdistro="Fedora" # For RHEL/CentOS/Fedora
	hash pacman &>/dev/null && userdistro="Arch" # For Arch Linux
	hash pkg_add &>/dev/null && userdistro="FreeBSD" # For FreeBSD
}

installpackages() {
	if [[ $can_sudo -eq 0 ]]; then
		printf '%s\n' " * You do not appear to have sudo rights." >&2
		printf '%s\n' " * Not installing packages." >&2
		return
	fi
	if [[ "$userdistro" == "Debian" ]]; then
		sudo apt-get install --assume-yes \
			vim zsh screen git subversion
	elif [[ "$userdistro" == "Fedora" ]]; then
		sudo yum install -y \
			vim zsh screen git subversion
	elif [[ "$userdistro" == "Arch" ]]; then
		sudo pacman --noconfirm -S \
			vim zsh screen git subversion
	elif [[ "$userdistro" == "FreeBSD" && $(uname -s) == "FreeBSD" ]]; then
		sudo pkg_add -r \
			vim zsh screen git subversion
	else
		printf '%s\n' "Your distro's package manager is not supported in this script, continuing with changing shell & linking dotfiles."
	fi
}

changeshell() {
	if [[ $(basename ${SHELL}) == "zsh" ]]; then
		printf '%s\n' "Your default shell is already zsh, continuing."
	else
		new_shell_path=/bin/zsh
		if [[ ! -x "${new_shell_path}" ]]; then
			new_shell_path="$(command -v zsh)"
			if [[ ! -x "${new_shell_path}" ]]; then
				printf ' * %s\n' \
					"zsh not found; not changing default shell!" \
					>&2
				return
			fi
		fi
		chsh -s "${new_shell_path}"
		printf '%s\n' "Default shell changed to zsh, logout and login to see changes"
	fi
}

linkfiles() {
	for i in "${files[@]}"; do
		if [[ -L ${HOME}/.$i && "$(readlink -e ${HOME}/.$i)" == "${HOME}/${dotfilesdir}/_$i" ]]; then
			printf '%s\n' "$i already up-to-date"
			continue
		fi

		if [[ -e ${HOME}/.$i ]]; then
			printf '%s\n' "back up previous $i"
			rm -f ${HOME}/.$i~
			mv -f ${HOME}/.$i ${HOME}/.$i~
		fi
		printf '%s\n' "symlink $i"
		ln -sf ${dotfilesdir}/_$i ${HOME}/.$i
		if [[ -f ${HOME}/.$i ]]; then
			# Create a .local file if we just copied a regular
			# file, i.e., not a directory
			printf '%s\n' "create local $i"
			touch ${HOME}/.$i.local
		fi
	done
	echo touch ~/.zhistory
}


getdotfiles() {
	if [[ -d ${HOME}/${dotfilesdir} ]]; then
		cd ${HOME}/${dotfilesdir}
		git pull
		git submodule update
		linkfiles
	else
		mkdir -p ${HOME}/${dotfilesdir}
		git clone $repo ${HOME}/${dotfilesdir}
		cd ${HOME}/${dotfilesdir}
		git submodule update --init
		linkfiles
	fi
}

usage() {
	printf 'Usage: %s [-s]\n' "$0"
}

while getopts "sh" opt; do
	case $opt in
		h) usage ; exit 0 ;;
		s) sudocheck ;;
		'?'|':') exit 1 ;;
		*) printf 'Internal error: unknown option %c\n' $opt >&2
			exit 1 ;;
	esac
done

distrocheck
installpackages
changeshell
getdotfiles
exec zsh
